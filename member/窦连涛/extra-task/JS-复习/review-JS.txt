1 浏览器端JS 包括

		ES DOM BOM

2 ES 哪些知识

		 语法 变量 循环 作用域 函数 闭包 正则 原型链

		 DOM 节点操作

		 BOM 操作

3 引入方式 两种

4 渲染机制

		1 全部下载再渲染

		2 按照浏览器自己的渲染一遍 资源下载完了 再绘制


5 解释白屏和FOUC

		白屏与无样式内容闪烁(FOUC,Flash of Unstyled Content)
		是因为不同浏览器加载与显示页面的机制不同而造成的。

		CSS 放入底部(或@import引入)

			chrome --- 加载完后呈现 --- 等待时间空白

			Firefox --- 先自己呈现 --- 加载后 --- 再重绘制
			--- 无样式闪烁

		CSS 放在 head 之前 JS 放在 </body> 之前

6	defer 和 async

		1 外部脚本
		2 在网络读取（下载）这块儿是一样的，都是异步的它俩的差别在于
			脚本下载完之后何时执行，显然defer 是最接近我们对于应用
			脚本加载和执行的要求的。
		3 defer 加载顺序有关
		4 async 加载无序

		async在IE<=9时不支持，其他浏览器OK
		defer在IE<=9时部分支持*，其他浏览器OK

7   浏览器渲染顺序

		解析HTML以构建DOM树及CSSOM树
		构建渲染树
		布局render
		绘制render

8   JS 数据类型

		简单数据类型

				数值(NaN) 字符串 布尔型 undefined null

				str ="s"++; NaN

				0开头会当做八进制，0x开头会当做十六进制，但是可以指定第二个参数指定基数

				801 数值转换
						Number()
						ParseInt()
						ParseFloat()

				802 String

						字符串的长度可以通过length属性获得

						indexOf：获取字符位置 注释：indexOf() 方法对大小写敏感！
										注释：如果要检索的字符串值没有出现，则该方法返回 -1。
						toLowerCase：转换为小写，toUpperCase：转换为大写
						trim：删除两端空白字符(IE9+)
						replace：字符串替换

						split：分割字符串位数组
					 "a,bc,d,e".split(','); // [a, bc, d, e]

					substr(start, length)：获取子字符串
					 "abcdef".substr(2,3); // "cde"

					substring(start, end)：获取子字符串
					 "abcdef".substring(2,3); // "c"


		复杂数据类型

				两种方式声明对象 字面量和构造方法

				对象
					狭义的对象
					数组
					函数
					正则

					参数
	 实参小于形参 输出undefined
	 实参和形参是一一对应的关系

	 简单类型和引用类型的区别

9 typeof是可以判断数据类型；instanceof则是可以判断一个变量是否某个对象的实例。

10 函数声明和函数表达式的区别

		函数声明 function xxx(){}

		函数表达式 var s1 = function xxx() {}

注意事项

		for循环中的变量是全局的，虽然变量后面紧跟着括号是大括号。切记切记

11 变量提升和函数提升

		变量提升只会将变量声明前置，不会获取变量的赋值。

		在声明提前的顺序上，函数声明的提升会在变量声明提升的后面。

12 arguments 是什么

13 函数的重载

		JS 中函数重载可以通过 arguments 来实现

14 立即执行函数

		 (function(){
		  /*body*/
		  }());

		  //或者
		  (function(){
		  /*body*/
		  })();

		  定义函数后立即调用该函数的效果

15 函数作用域

		1 全局作用域

			最外层函数(Window)和在最外层函数外面定义的变量拥有全局作用域

			所有末定义直接赋值的变量自动声明为拥有全局作用域(主要指的是函数内部)

			所有window对象的属性拥有全局作用域

		2 局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部


16 作用域链

		一层一层的网上找 执行的时候开始赋值

17 常用的数组函数

		1 构造函数

				var a1 = new Array();

				传入一个数字参数 表示数组的长度
				传入两个以上的数字参数 表示数组的成员


		2 字面量

				var a4 = [];

		3 栈方法和堆方法

				push 向数组添加一个成员，放置数组的末尾，其它成员顺次移动。返回该数组的长度。
				pop 将数组的最后一个成员 删除，其它成员顺次移动。返回删除该数组成员。
				unshift 向数组添加一个成员放置数组的第一位，其它成员顺次移动。返回该数组的长度。
				shift 将数组的第一个成员 删除，其它成员顺次移动。返回删除的原数组成员。

				splice 任意位置添加/删除数组中的成员，其它成员并顺次移动。对原数组进行操作。
				1 如果有两个参数，第一个参数表示起始的下标，第二个参数表示删除的个数。
				2 如果有N个参数，第一个参数表示起始的下标，第二个设置为0（表示没有删除）,
				上下的表示要添加的数组成员。

				reverse 将数组中元素倒叙排列

				sort 先要转换为字符串 用ASCII码 进行比较
				**********************************************************

				slice 将原数组中一部分浅复制存入一个新的数组对象中，
				并返回这个新的数组 ，对原始数组没有改变

				split 将一个字符串转化为一个字符串数组。
				返回一个新的字符串数组，原字符串无变化。
				Join(separator) 将数组中的成员放入一个字符串中，
				并返回该字符串。

				concat 将两个数组拼接到一起.返回一个新的数组。

				arrayObject.slice(start,end) start 必须
