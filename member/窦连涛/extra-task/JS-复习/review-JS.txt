1 浏览器端JS 包括

		ES DOM BOM

2 ES 哪些知识

		 语法 变量 循环 作用域 函数 闭包 正则

		 DOM 节点操作

		 BOM 操作

3 引入方式 两种

4 渲染机制

		1 全部下载再渲染

		2 按照浏览器自己的渲染一遍 资源下载完了 再绘制


5 解释白屏和FOUC

		白屏与无样式内容闪烁(FOUC,Flash of Unstyled Content)是因为不同浏览器加载与显示页面的机制不同而造成的。

		CSS 放入底部(或@import引入)

			chrome --- 加载完后呈现 --- 等待时间空白

			Firefox --- 先自己呈现 --- 加载后 --- 再重绘制 --- 无样式闪烁

		CSS 放在 head 之前 JS 放在 </body> 之前

6	defer 和 async

		1 外部脚本
		2 在网络读取（下载）这块儿是一样的，都是异步的它俩的差别在于脚本下载完之后何时执行，显然defer 是最接近我们对于应用脚本加载和执行的要求的。
		3 defer 加载顺序有关
		4 async 加载无序

		async在IE<=9时不支持，其他浏览器OK
		defer在IE<=9时部分支持*，其他浏览器OK

7   浏览器渲染顺序

		解析HTML以构建DOM树及CSSOM树
		构建渲染树
		布局render
		绘制render

8   JS 数据类型

		简单数据类型

				数值 字符串 布尔型 undefined null

		复杂数据类型

				对象
					狭义的对象
					数组
					函数
					正则

9 typeof是可以判断数据类型；instanceof则是可以判断一个变量是否某个对象的实例。

10 函数声明和函数表达式的区别

		函数声明 function xxx(){}

		函数表达式 var s1 = function xxx() {}

注意事项

		for循环中的变量是全局的，虽然变量后面紧跟着括号是大括号。切记切记

101 数值转换

		Number()
		ParseInt()
		ParseFloat()

102 String

		字符串的长度可以通过length属性获得

11 变量提升和函数提升

		变量提升只会将变量声明前置，不会获取变量的赋值。

		在声明提前的顺序上，函数声明的提升会在变量声明提升的后面。

12 arguments 是什么

13 函数的重载

		JS 中函数重载可以通过 arguments 来实现

14 立即执行函数

		 (function(){
		  /*body*/
		  }());

		  //或者
		  (function(){
		  /*body*/
		  })();

		  定义函数后立即调用该函数的效果

15 函数作用域

		1 全局作用域

			最外层函数和在最外层函数外面定义的变量拥有全局作用域

			所有末定义直接赋值的变量自动声明为拥有全局作用域(主要指的是函数内部)

			所有window对象的属性拥有全局作用域

		2 局部作用域一般只在固定的代码片段内可访问到，最常见的例如函数内部


14 作用域链

	
