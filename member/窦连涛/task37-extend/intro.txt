继承

		var cate1 = {
			name:"草莓味面包",
			sayName : function(){
				console.log(this.name);
			}
		}

		var cate2 = {
			name:"巧克力味面包",
			sayName : function(){
				console.log(this.name);
			}
		}

		虽然对象的内部的属性和方法 都一样，
		但还是每个都需要单独定义 重复造轮子

		工厂模式:

			function createCake(name,age){
				var obj = {
					name:name,
					sayName : function(){
						console.log(this.name);
					}
				}

				return obj;
			}

			cake1 = createCake('草莓');
			cake2 = createCake('巧克力');


	2 构造函数模式

			function Cake(name,age){
				
				this.name = name;
				this.sayName = function(){
					console.log(this.name);
				}
				
			}

			cake1 = new Cake('草莓');
			cake2 = new Cake('巧克力');

	3 原型模式

		function inherit(superType, subType){
		    var _prototype  = Object.create(superType.prototype);
		    _prototype.constructor = subType;
		    subType.prototype = _prototype;
		}

		function Person(name, sex){
		    this.name = name;
		    this.sex = sex;
		}

		Person.prototype.printName = function(){
		    console.log(this.name);
		};    

		function Male(name, sex, age){
		    Person.call(this, name, sex);
		    this.age = age;
		}
		inherit(Person, Male);

		// 在继承函数之后写自己的方法，否则会被覆盖
		Male.prototype.printAge = function(){
		    console.log(this.age);
		};

		var m = new Male('Byron', 'm', 26);
		m.printName();

